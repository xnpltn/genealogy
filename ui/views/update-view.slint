import { CustomButton } from "../components/button.slint";
import { Button, CheckBox, Switch, HorizontalBox, Slider, LineEdit, GroupBox, ComboBox, DatePickerPopup, VerticalBox, Palette, StandardTableView , ScrollView, TextEdit} from "std-widgets.slint";
import { TableData , Relative} from "../types.slint";


export component UpdateView inherits Rectangle {
    in-out property <Relative> relative;
    in-out property <Relative> og;
    in-out property <string> title;
    border-radius: 10px;

    VerticalLayout {
        spacing: 10px;
        padding: 10px;
        message := PopupWindow {
            height: 100px;
            width: 100px;
            close-on-click: false;
            x: (root.width - self.width) / 2;
            y: (root.height - self.height) / 2;
            Rectangle {
                x: (parent.width - self.width) / 2;
                y: (parent.height - self.height) / 2;
                height: 200px;
                width: 200px;
                border-radius: 20px;
                background: TableData.update-success != "" ? green : red;
                VerticalLayout {
                    VerticalLayout {
                        alignment: center;
                        VerticalLayout {
                            alignment: center;
                            Text {
                                horizontal-alignment: center;
                                font-size: 20px;
                                font-weight: 400;
                                text: TableData.update-success != "" ? TableData.update-success : TableData.update-eror;
                                color: white;
                            }
                        }
                    }

                    HorizontalBox {
                        alignment: center;
                        Button {
                            text: "OK";
                            clicked => {
                                TableData.selected-mother-name = "";
                                TableData.selected-father-name = "";
                                message.close()
                            }
                        }
                    }
                }
            }
        }

        ScrollView {
            VerticalLayout {
                spacing: 15px;
                GroupBox {
                    title: "Personal Information";
                    VerticalLayout {
                        spacing: 10px;
                        HorizontalBox {
                            spacing: 10px;
                            VerticalLayout {
                                Text {
                                    text: "First Name";
                                }

                                first-name := LineEdit {
                                    placeholder-text: "First Name";
                                    text: TableData.active-relative.first-name;
                                }
                            }

                            VerticalLayout {
                                Text {
                                    text: "Middle Name";
                                }

                                middle-name := LineEdit {
                                    placeholder-text: "Middle Name";
                                    text: TableData.active-relative.middle-name;
                                }
                            }

                            VerticalLayout {
                                Text {
                                    text: "Last Name";
                                }

                                last-name := LineEdit {
                                    placeholder-text: "Last Name";
                                    text: TableData.active-relative.last-name;
                                }
                            }
                        }

                        HorizontalBox {
                            spacing: 10px;
                            VerticalLayout {
                                Text {
                                    text: "Sex";
                                }

                                sex := ComboBox {
                                    width: 25%;
                                    model: ["male", "female"];
                                    current-value: TableData.active-relative.sex;
                                }
                            }

                            VerticalLayout {
                                Text {
                                    text: "Birthday";
                                }

                                birthday := LineEdit {
                                    placeholder-text: "Birthday (YYYY-MM-DD)";
                                    text: TableData.active-relative.birthday;
                                    width: 25%;
                                }
                            }

                            VerticalLayout {
                                Text {
                                    text: "Phone";
                                }

                                phone := LineEdit {
                                    placeholder-text: "Phone";
                                    text: TableData.active-relative.phone;
                                    width: 25%;
                                }
                            }
                        }

                        HorizontalBox {
                            spacing: 10px;
                            VerticalLayout {
                                Text {
                                    text: "Email";
                                }

                                email := LineEdit {
                                    placeholder-text: "Email";
                                    text: TableData.active-relative.email;
                                    width: 40%;
                                }
                            }

                            VerticalLayout {
                                Text {
                                    text: "ATNum";
                                }

                                LineEdit {
                                    placeholder-text: "ATNum";
                                    width: 25%;
                                }
                            }

                            VerticalLayout {
                                Text {
                                    text: "Sameness";
                                }

                                sameness := LineEdit {
                                    placeholder-text: "Sameness";
                                    text: TableData.active-relative.sameness;
                                    width: 25%;
                                }
                            }
                        }

                        HorizontalBox {
                            spacing: 10px;
                            VerticalLayout {
                                Text {
                                    text: @tr("Employable | {}", employable.value);
                                }

                                employable := Slider {
                                    minimum: 0;
                                    maximum: 10;
                                    width: 25%;
                                    value: TableData.active-relative.employable;
                                }
                            }

                            VerticalLayout {
                                Text {
                                    text: @tr("Hotness | {}", hotness.value);
                                }

                                hotness := Slider {
                                    minimum: 0;
                                    maximum: 10;
                                    width: 25%;
                                    value: TableData.active-relative.hotness;
                                    enabled: sex.current-value == sex.model[1];
                                }
                            }

                            VerticalLayout {
                                Text {
                                    text: @tr("Swarthy | {}", swarthy.value);
                                }

                                swarthy := Slider {
                                    minimum: 0;
                                    maximum: 10;
                                    width: 25%;
                                    value: TableData.active-relative.swarthy;
                                    enabled: sex.current-value == sex.model[1];
                                }
                            }

                            VerticalLayout {
                                Text {
                                    text: @tr("Crazy | {}", crazy.value);
                                }

                                crazy := Slider {
                                    minimum: 0;
                                    maximum: 10;
                                    width: 25%;
                                    value: TableData.active-relative.crazy;
                                    enabled: sex.current-value == sex.model[1];
                                }
                            }
                        }

                        HorizontalBox {
                            spacing: 10px;
                            VerticalLayout {
                                Text {
                                    text: "Lost Reason";
                                }

                                lost := LineEdit {
                                    placeholder-text: "Lost Reason";
                                    text: TableData.active-relative.lost-reason;
                                }
                            }
                        }

                        HorizontalBox {
                            spacing: 10px;
                            pinned := CheckBox {
                                text: "Pinned";
                                checked: TableData.active-relative.pinned;
                            }
                        }

                        HorizontalBox {
                            spacing: 10px;
                            alignment: space-around;
                            VerticalLayout {
                                Text {
                                    text: TableData.selected-mother-name != "" ? @tr("Update Mother | current {}", TableData.selected-mother-name) : "Choose Mother";
                                }

                                mother := ComboBox {
                                    model: TableData.females2;
                                }
                            }

                            VerticalLayout {
                                Text {
                                    text: TableData.selected-father-name != "" ? @tr("Update Father | current {}", TableData.selected-father-name) : "Choose Father";
                                }

                                father := ComboBox {
                                    model: TableData.males;
                                }
                            }
                        }

                        HorizontalBox {
                            Button {
                                text: "Save";
                                clicked => {
                                    relative = {
                                        first-name: first-name.text,
                                        middle-name: middle-name.text,
                                        last-name: last-name.text,
                                        sex: sex.current-value,
                                        phone: phone.text,
                                        email: email.text,
                                        birthday: birthday.text,
                                        lost-reason: lost.text,
                                        sameness: sameness.text,
                                        pinned: pinned.checked,
                                        hotness: hotness.value,
                                        employable: employable.value,
                                        crazy: crazy.value,
                                        swarthy: swarthy.value,
                                        mother-id: TableData.active-relative.mother-id,
                                        father-id: TableData.active-relative.father-id,
                                    };
                                    TableData.update-relative(TableData.active-relative.id,relative, mother.current-value, father.current-value);
                                    message.show();
                                }
                            }
                        }
                    }
                }

                GroupBox {
                    VerticalLayout {
                        spacing: 10px;
                        HorizontalLayout {
                            alignment: space-around;
                            CustomButton {
                                height: 40px;
                                width: 120px;
                                title: @tr("Delete");
                                background: red;
                                clicked => {
                                    TableData.delete-relative(TableData.active-relative.id);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
